{{ $randomid := randAlphaNum 8 | lower }}
{{ $base := .Values.BaseName | default "undescribed-job" }}
{{ $namespace := .Values.NameSpace | default "default"  }}
{{ $deploy := .Values.DeployName | default (printf "%s-%s-%s" $namespace $base .Release.Name) }}
{{ $label := .Values.Label | default (printf "%s-%s" $base .Release.Name) }}
{{ $containername := .Values.ContainerName | default (printf "%s-%s" $base .Release.Name) }}
{{ $containerimage := .Values.ContainerImage | default "harbor.ai.iiis.co/xuw/pytorch:v1.5" }}
{{ $uid := .Values.UID | default "0" }}
{{ $gid := .Values.GID | default "0" }}

{{- $limits := .Values.Limits | default (dict) }}
{{ $limitscpu := $limits.CPU | default "8" }}
{{ $limitsmemory := $limits.memory | default "16Gi" }}
{{ $limitsgpu := $limits.GPU | default "0" }}

{{ $nvme := .Values.NVMEStorage | default "100Gi" }}
{{ $nogfs := .Values.NoGFS | default false }}
{{ $extraport := .Values.ExtraPort | default 0 }}
{{ $ingresshost := .Values.IngressHost | default "" }}
{{ $use_shm := .Values.UseShm | default false}}

{{ $command := .Values.Command | default "" }}
{{ $args := .Values.Args | default "" }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $deploy }}
  namespace: {{ $namespace }}
  labels:
    app: {{ $label }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ $label }}
  template:
    metadata:
      labels:
        app: {{ $label }}
    spec:
      hostIPC: false
      hostPID: false
      hostNetwork: true
      securityContext:
        runAsUser: {{ $uid }}
        runAsGroup: {{ $gid }}
      containers:
      - name: {{ $containername }}
        imagePullPolicy: IfNotPresent
        image: {{ $containerimage }} # 可自行更改镜像和版本
{{- if $command }}
        command: {{ $command }}
        args: {{ $args }}
{{- else }}
        command: ["bash", "-c", "--"]
        args: ["while true; do sleep 30; done;"]
{{- end }}
        resources:
          limits:
            cpu: {{ $limitscpu }} # 最大CPU
            memory: {{ $limitsmemory }} # 最大内存数目
            nvidia.com/gpu: {{ $limitsgpu }} # 请求的GPU数量
        volumeMounts:
        - name: nfshome # 与下面volumes的名字对应
          mountPath: /root # 本地的挂载点 /root
        - name: scratch1 # 与下面volumes的名字对应
          mountPath: /scratch1 # 本地的挂载点
        - name: scratch2 # 与下面volumes的名字对应
          mountPath: /scratch2 # 本地的挂载点
{{ if not $nogfs }}
        - name: gfshome # 与下面volumes的名字对应
          mountPath: /gfshome # 本地的挂载点
        - name: gfshare # 与下面volumes的名字对应
          mountPath: /share # 本地的挂载点
        - name: ssdshare # 与下面volumes的名字对应
          mountPath: /ssdshare # 本地的挂载点
{{ end }}
{{ if $use_shm }}
        - name: dshm
          mountPath: /dev/shm
{{ end }}
      volumes:
{{ if $use_shm }}
      - name: dshm
        emptyDir:
          medium: Memory
          sizeLimit: 4Gi
{{ end }}
      - name: nfshome
        persistentVolumeClaim:
          claimName: pvc-nfshome-{{ $namespace }}
      - name: scratch1
        persistentVolumeClaim:
          claimName: pvc-rancher-localpath-1-{{ $namespace }}-{{ $deploy }}-{{ $randomid}}
      - name: scratch2
        persistentVolumeClaim:
          claimName: pvc-rancher-localpath-2-{{ $namespace }}-{{ $deploy }}-{{ $randomid}}

{{ if not $nogfs }}
      - name: gfshome
        persistentVolumeClaim:
          claimName: gfs-sata-pvc-{{ $namespace }}
      - name: gfshare
        persistentVolumeClaim:
          claimName: gfs-sata-pvc-share-{{ $namespace }}
      - name: ssdshare
        persistentVolumeClaim:
          claimName: gfs-nvme-pvc-share-{{ $namespace }}
{{ end }}

---
apiVersion: v1
kind: Service
metadata:
  annotations: {}
  labels: 
    app: {{ $label }}
    k8s.kuboard.cn/name: {{ $deploy }}
  name: {{ $deploy }}
  namespace: {{ $namespace }}
spec: 
  ports:
    - name: {{ $deploy }}-port
      port: 22
      protocol: TCP
      targetPort: 22
{{ if $extraport}}
    - name: {{ $deploy }}-extraport
      port: {{ $extraport }}
      protocol: TCP
      targetPort: {{ $extraport }}
{{ end }}
  selector: 
    app: {{ $label }}
  sessionAffinity: None
  type: NodePort
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pvc-rancher-localpath-1-{{ $namespace }}-{{ $deploy }}-{{ $randomid}}
  namespace: {{ $namespace }}
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: {{ $nvme }}
  storageClassName: rancher-local-path
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pvc-rancher-localpath-2-{{ $namespace }}-{{ $deploy }}-{{ $randomid}}
  namespace: {{ $namespace }}
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: {{ $nvme}}
  storageClassName: rancher-local-path

{{ if $ingresshost }}

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
  name: {{ $deploy }}
  namespace: {{ $namespace }}
spec:
  ingressClassName: nginx
  rules:
    - host: {{ $ingresshost }}
      http:
        paths:
          - backend:
              service:
                name: {{ $deploy }}
                port:
                  number: {{ $extraport }}
            path: /
            pathType: Prefix
  tls:
    - hosts:
        - {{ $ingresshost }}
      secretName: passwd-tls

{{ end }}
